// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  uid          String        @id 
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  name         String?

  Credentials  Credentials?
  AuthProvider AuthProvider?
  Admin        Admin?
  Manager      Manager?
  Valet        Valet?
  Customer     Customer?
}

model Admin {
  uid    String @id 
  User   User   @relation(fields: [uid], references: [uid])
  
  createdAt     DateTime        @default(now())
  updated       DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  Verifications Verifications[]
}

model Credentials {
  uid    String   @id 
  User User @relation(fields: [uid], references: [uid])

  email        String   @unique
  passwordHash String

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model AuthProvider {
  uid    String    @id

  type AuthProviderType
  User User             @relation(fields: [uid], references: [uid])
}

enum AuthProviderType {
  GOOGLE
  CREDENTIALS
}


model Customer {
  uid          String    @id 
  user         User       @relation(fields: [uid], references: [uid])
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  displayName  String?

  Bookings Booking[]
  Reviews  Review[]
}

model Manager {
  uid             String    @id 
  User            User      @relation(fields: [uid], references: [uid])

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  displayName     String?

  companyId       Int?       @unique
  Company         Company?   @relation(fields: [companyId], references: [id])
  BookingTimeline BookingTimeline[]
}

model Valet {
  uid           String      @id 
  User          User        @relation(fields: [uid], references: [uid])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  displayName   String?
  image         String?
  licenceID     String      @default("")

  companyId            Int?
  Company              Company?          @relation(fields: [companyId], references: [id])
  BookingTimeline      BookingTimeline[]
  PickupAssignments    ValetAssignment[] @relation("PickupValet")
  ReturnAssignments    ValetAssignment[] @relation("ReturnValet")

  @@unique([companyId, uid])  
}

model Company {
  id            Int           @id @default(autoincrement())
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  displayName   String?
  description   String?

  Garages       Garage[]
  Managers      Manager[]
  Valets        Valet[]
}

model Garage {
  id           Int          @id @default(autoincrement())
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  displayName  String?
  description  String?
  images       String[]

  companyId    Int
  
}